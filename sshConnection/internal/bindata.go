// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package internal generated by go-bindata.// sources:
// DefaultCert
// DefaultCert.pub
package internal

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultcert = []byte(`-----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----
`)

func defaultcertBytes() ([]byte, error) {
	return _defaultcert, nil
}

func defaultcert() (*asset, error) {
	bytes, err := defaultcertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultCert", size: 2622, mode: os.FileMode(438), modTime: time.Unix(1654710056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultcertPub = []byte(`ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCqyclLLtOGtG0D8L+o8xcEBK93BMSk3WVOO+jSS2TU/wSITRLyKSJyIlTxvD02UJfSv+616Z15vi6Up7qjTT/jbsYp2GMGde9YiMACfBjMKxdVlEJxJtXOv+gLcRlqar2HP/I3SVP18pNQXXwoxLxOzzqBTY1vEE6D6VkOhW60/wUqgB/I1lju5SG6C/nIhzIXDCSJdDSYkbE9GAf8+ThsQlsFrGqzkMZUvhygG6JkB5EwVHuwkXMuYwQH86DXSEdtn1Oo/p+9NH5s8FOGmRmoKJ3oHIrMJXTwrAWXZ8rG3bzxx1CrImQQU5f2td+fEFRQmCZTIw6LTLZdVc7tAhimRQE5bWXYyzKPMK93e0gO7vKRfVv+Ba469rZsjzzD3b4kDnPPysDLHy9YwtbjGFhMrndNeQcEQGG+RFeIUcN83REwKu84ZFdas78geDskqmjn2Mxch6//aRj9zU2t94mB2R9tI0i1lRtvNjV6Mv4wctwrq0YHssuad2xTFpxx1+E= credogroup\bbosman@BrendanDell
`)

func defaultcertPubBytes() ([]byte, error) {
	return _defaultcertPub, nil
}

func defaultcertPub() (*asset, error) {
	bytes, err := defaultcertPubBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DefaultCert.pub", size: 585, mode: os.FileMode(438), modTime: time.Unix(1654710056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DefaultCert":     defaultcert,
	"DefaultCert.pub": defaultcertPub,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DefaultCert":     &bintree{defaultcert, map[string]*bintree{}},
	"DefaultCert.pub": &bintree{defaultcertPub, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
